package Regex.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_OccursRange_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_OccursRange_NonTypesystemRule() {
  }
  public void applyRule(final SNode occursRange, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SPropertyOperations.getInteger(occursRange, PROPS.first$9WYf) < 0) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(occursRange, "Quantification must be positive for first value", "r:2811719e-63f6-4f56-bca1-946304c41949(Regex.typesystem)", "1899509154290327444", null, errorTarget);
      }
    }

    if (SPropertyOperations.getInteger(occursRange, PROPS.last$9Xsh) < 0) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(occursRange, "Quantification must be positive for last value", "r:2811719e-63f6-4f56-bca1-946304c41949(Regex.typesystem)", "1899509154290328830", null, errorTarget);
      }
    }

    if (SPropertyOperations.getInteger(occursRange, PROPS.last$9Xsh) < SPropertyOperations.getInteger(occursRange, PROPS.first$9WYf)) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(occursRange, "First value must be smaller than last", "r:2811719e-63f6-4f56-bca1-946304c41949(Regex.typesystem)", "1899509154290382750", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.OccursRange$6N;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty first$9WYf = MetaAdapterFactory.getProperty(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c69830508acffL, 0x1a5c698304eb2debL, "first");
    /*package*/ static final SProperty last$9Xsh = MetaAdapterFactory.getProperty(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c69830508acffL, 0x1a5c698304eb2dedL, "last");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept OccursRange$6N = MetaAdapterFactory.getConcept(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c69830508acffL, "Regex.structure.OccursRange");
  }
}
