package Regex.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AnythingTerm = 0;
  public static final int EndsWith = 1;
  public static final int FollowedWith = 2;
  public static final int LettersTerm = 3;
  public static final int NumbersTerm = 4;
  public static final int OccursIndefinitely = 5;
  public static final int OccursQuantification = 6;
  public static final int OccursRange = 7;
  public static final int OrTerm = 8;
  public static final int Regex = 9;
  public static final int RegexTerm = 10;
  public static final int SomethingTerm = 11;
  public static final int StartsWith = 12;
  public static final int StringTerm = 13;
  public static final int Term = 14;
  public static final int WithExpression = 15;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL);
    builder.put(0x1a5c698304eb2de7L, AnythingTerm);
    builder.put(0x1a5c698304e8bfcfL, EndsWith);
    builder.put(0x1a5c698304e8bfceL, FollowedWith);
    builder.put(0x1a5c698304eb2de9L, LettersTerm);
    builder.put(0x1a5c698304eb2deaL, NumbersTerm);
    builder.put(0x1a5c69830508acfcL, OccursIndefinitely);
    builder.put(0x1a5c69830508acfbL, OccursQuantification);
    builder.put(0x1a5c69830508acffL, OccursRange);
    builder.put(0x1a5c698304eb2dfaL, OrTerm);
    builder.put(0x1a5c698304e8a7bfL, Regex);
    builder.put(0x1a5c698304eb2e11L, RegexTerm);
    builder.put(0x1a5c698304eb2de8L, SomethingTerm);
    builder.put(0x1a5c698304e8bfcdL, StartsWith);
    builder.put(0x1a5c698304eb2de6L, StringTerm);
    builder.put(0x1a5c698304eb2dfbL, Term);
    builder.put(0x1a5c698304e8bfd0L, WithExpression);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
