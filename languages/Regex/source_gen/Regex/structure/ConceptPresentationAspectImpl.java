package Regex.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AnythingTerm;
  private ConceptPresentation props_EndsWith;
  private ConceptPresentation props_FollowedWith;
  private ConceptPresentation props_LettersTerm;
  private ConceptPresentation props_NumbersTerm;
  private ConceptPresentation props_OccursIndefinitely;
  private ConceptPresentation props_OccursQuantification;
  private ConceptPresentation props_OccursRange;
  private ConceptPresentation props_OrTerm;
  private ConceptPresentation props_Regex;
  private ConceptPresentation props_RegexTerm;
  private ConceptPresentation props_SomethingTerm;
  private ConceptPresentation props_StartsWith;
  private ConceptPresentation props_StringTerm;
  private ConceptPresentation props_Term;
  private ConceptPresentation props_WithExpression;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AnythingTerm:
        if (props_AnythingTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("anything");
          props_AnythingTerm = cpb.create();
        }
        return props_AnythingTerm;
      case LanguageConceptSwitch.EndsWith:
        if (props_EndsWith == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ends with");
          props_EndsWith = cpb.create();
        }
        return props_EndsWith;
      case LanguageConceptSwitch.FollowedWith:
        if (props_FollowedWith == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("followed with");
          props_FollowedWith = cpb.create();
        }
        return props_FollowedWith;
      case LanguageConceptSwitch.LettersTerm:
        if (props_LettersTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("letters");
          props_LettersTerm = cpb.create();
        }
        return props_LettersTerm;
      case LanguageConceptSwitch.NumbersTerm:
        if (props_NumbersTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("numbers");
          props_NumbersTerm = cpb.create();
        }
        return props_NumbersTerm;
      case LanguageConceptSwitch.OccursIndefinitely:
        if (props_OccursIndefinitely == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("indefinitely");
          props_OccursIndefinitely = cpb.create();
        }
        return props_OccursIndefinitely;
      case LanguageConceptSwitch.OccursQuantification:
        if (props_OccursQuantification == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_OccursQuantification = cpb.create();
        }
        return props_OccursQuantification;
      case LanguageConceptSwitch.OccursRange:
        if (props_OccursRange == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("range");
          props_OccursRange = cpb.create();
        }
        return props_OccursRange;
      case LanguageConceptSwitch.OrTerm:
        if (props_OrTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("or");
          props_OrTerm = cpb.create();
        }
        return props_OrTerm;
      case LanguageConceptSwitch.Regex:
        if (props_Regex == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("regex");
          props_Regex = cpb.create();
        }
        return props_Regex;
      case LanguageConceptSwitch.RegexTerm:
        if (props_RegexTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("inner regex");
          props_RegexTerm = cpb.create();
        }
        return props_RegexTerm;
      case LanguageConceptSwitch.SomethingTerm:
        if (props_SomethingTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("something");
          props_SomethingTerm = cpb.create();
        }
        return props_SomethingTerm;
      case LanguageConceptSwitch.StartsWith:
        if (props_StartsWith == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("starts with");
          props_StartsWith = cpb.create();
        }
        return props_StartsWith;
      case LanguageConceptSwitch.StringTerm:
        if (props_StringTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"\"");
          props_StringTerm = cpb.create();
        }
        return props_StringTerm;
      case LanguageConceptSwitch.Term:
        if (props_Term == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Term = cpb.create();
        }
        return props_Term;
      case LanguageConceptSwitch.WithExpression:
        if (props_WithExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_WithExpression = cpb.create();
        }
        return props_WithExpression;
    }
    return null;
  }
}
