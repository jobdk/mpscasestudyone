package Regex.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AnythingTerm_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new EndsWith_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new FollowedWith_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new LettersTerm_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new NumbersTerm_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new OccursIndefinitely_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new OccursRange_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new OrTerm_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Regex_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new RegexTerm_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new SomethingTerm_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new StartsWith_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new StringTerm_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "Regex.editor.OccursQuantityTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new OccursQuantityTransformationMenu()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (menuId.getFqName()) {
            case "Regex.editor.StringTermTransformation":
              return Arrays.asList(new TransformationMenu[]{new StringTermTransformation()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (menuId.getFqName()) {
            case "Regex.editor.OrTransformation":
              return Arrays.asList(new TransformationMenu[]{new OrTransformation()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new OrTerm_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new Term_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new WithExpression_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2de7L), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8bfcfL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8bfceL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2de9L), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2deaL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c69830508acfcL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c69830508acffL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2dfaL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8a7bfL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2e11L), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2de8L), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8bfcdL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2de6L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c69830508acfbL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2de6L), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2dfbL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2dfaL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2dfbL), MetaIdFactory.conceptId(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8bfd0L)).seal();
}
