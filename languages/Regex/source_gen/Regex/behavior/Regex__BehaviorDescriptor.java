package Regex.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Objects;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Regex__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8a7bfL, "Regex.structure.Regex");

  public static final SMethod<Boolean> isInnerRegex_id1Dsqoc4Uu6g = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isInnerRegex").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154287575440L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();
  public static final SMethod<Boolean> isEndsWithDefined_id1Dsqoc4Uy_Q = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isEndsWithDefined").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154287593846L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();
  public static final SMethod<Iterable<SNode>> followedWithNodes_id1Dsqoc4ZHl6 = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("followedWithNodes").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154288948550L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();
  public static final SMethod<SNode> endsWithNode_id1Dsqoc4ZHdg = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("endsWithNode").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154288948048L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();
  public static final SMethod<String> buildRegex_id1Dsqoc50z0J = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("buildRegex").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154289168431L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();
  public static final SMethod<SNode> startsWithNode_id1Dsqoc4ZGYY = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("startsWithNode").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154288947134L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();
  public static final SMethod<Boolean> isStartsWithDefined_id1Dsqoc4UuJ$ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isStartsWithDefined").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154287578084L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(isInnerRegex_id1Dsqoc4Uu6g, isEndsWithDefined_id1Dsqoc4Uy_Q, followedWithNodes_id1Dsqoc4ZHl6, endsWithNode_id1Dsqoc4ZHdg, buildRegex_id1Dsqoc50z0J, startsWithNode_id1Dsqoc4ZGYY, isStartsWithDefined_id1Dsqoc4UuJ$);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isInnerRegex_id1Dsqoc4Uu6g(@NotNull SNode __thisNode__) {
    return (SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.Regex$uR, false, false) != null);
  }
  /*package*/ static boolean isEndsWithDefined_id1Dsqoc4Uy_Q(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.expressions$RVmz)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.EndsWith$92);
      }
    });
  }
  /*package*/ static Iterable<SNode> followedWithNodes_id1Dsqoc4ZHl6(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.expressions$RVmz), CONCEPTS.FollowedWith$8z);
  }
  /*package*/ static SNode endsWithNode_id1Dsqoc4ZHdg(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.expressions$RVmz), CONCEPTS.EndsWith$92)).first();
  }
  /*package*/ static String buildRegex_id1Dsqoc50z0J(@NotNull SNode __thisNode__) {
    SNode startsWithNode = Regex__BehaviorDescriptor.startsWithNode_id1Dsqoc4ZGYY.invoke(__thisNode__);
    SNode endsWithNode = Regex__BehaviorDescriptor.endsWithNode_id1Dsqoc4ZHdg.invoke(__thisNode__);
    String followedWithRegex = IterableUtils.join(Sequence.fromIterable(Regex__BehaviorDescriptor.followedWithNodes_id1Dsqoc4ZHl6.invoke(__thisNode__)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return (String) WithExpression__BehaviorDescriptor.getRegexTerm_id1Dsqoc50r5$.invoke(it);
      }
    }), "");

    return (((startsWithNode == null) ? "" : WithExpression__BehaviorDescriptor.getRegexTerm_id1Dsqoc50r5$.invoke(startsWithNode))).concat((Objects.equals(followedWithRegex, null) ? "" : followedWithRegex)).concat(((endsWithNode == null) ? "" : WithExpression__BehaviorDescriptor.getRegexTerm_id1Dsqoc50r5$.invoke(endsWithNode)));
  }
  /*package*/ static SNode startsWithNode_id1Dsqoc4ZGYY(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.expressions$RVmz), CONCEPTS.StartsWith$84)).first();
  }
  /*package*/ static boolean isStartsWithDefined_id1Dsqoc4UuJ$(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.expressions$RVmz)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.StartsWith$84);
      }
    });
  }

  /*package*/ Regex__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) isInnerRegex_id1Dsqoc4Uu6g(node));
      case 1:
        return (T) ((Boolean) isEndsWithDefined_id1Dsqoc4Uy_Q(node));
      case 2:
        return (T) ((Iterable<SNode>) followedWithNodes_id1Dsqoc4ZHl6(node));
      case 3:
        return (T) ((SNode) endsWithNode_id1Dsqoc4ZHdg(node));
      case 4:
        return (T) ((String) buildRegex_id1Dsqoc50z0J(node));
      case 5:
        return (T) ((SNode) startsWithNode_id1Dsqoc4ZGYY(node));
      case 6:
        return (T) ((Boolean) isStartsWithDefined_id1Dsqoc4UuJ$(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Regex$uR = MetaAdapterFactory.getConcept(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8a7bfL, "Regex.structure.Regex");
    /*package*/ static final SConcept EndsWith$92 = MetaAdapterFactory.getConcept(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8bfcfL, "Regex.structure.EndsWith");
    /*package*/ static final SConcept FollowedWith$8z = MetaAdapterFactory.getConcept(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8bfceL, "Regex.structure.FollowedWith");
    /*package*/ static final SConcept StartsWith$84 = MetaAdapterFactory.getConcept(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8bfcdL, "Regex.structure.StartsWith");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expressions$RVmz = MetaAdapterFactory.getContainmentLink(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304e8a7bfL, 0x1a5c698304e8bfd7L, "expressions");
  }
}
