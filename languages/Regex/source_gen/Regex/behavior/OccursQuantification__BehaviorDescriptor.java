package Regex.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;

public final class OccursQuantification__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c69830508acfbL, "Regex.structure.OccursQuantification");

  public static final SMethod<String> getRegexTerm_id1Dsqoc52gZX = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getRegexTerm").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154289618941L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();
  public static final SMethod<SNode> getStringTerm_id1Dsqoc53fYt = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getStringTerm").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1899509154289876893L).languageId(0xbd9bd3ba356b36eeL, 0x57f03870b8ad4e95L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getRegexTerm_id1Dsqoc52gZX, getStringTerm_id1Dsqoc53fYt);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getRegexTerm_id1Dsqoc52gZX(@NotNull SNode __thisNode__) {
    return "";
  }
  /*package*/ static SNode getStringTerm_id1Dsqoc53fYt(@NotNull SNode __thisNode__) {
    return SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), CONCEPTS.StringTerm$iJ);
  }

  /*package*/ OccursQuantification__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getRegexTerm_id1Dsqoc52gZX(node));
      case 1:
        return (T) ((SNode) getStringTerm_id1Dsqoc53fYt(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StringTerm$iJ = MetaAdapterFactory.getConcept(0x57f03870b8ad4e95L, 0xbd9bd3ba356b36eeL, 0x1a5c698304eb2de6L, "Regex.structure.StringTerm");
  }
}
